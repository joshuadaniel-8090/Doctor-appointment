'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var ensureCallable = function ensureCallable(maybeFn) {
    return typeof maybeFn === 'function' ? maybeFn : function () {
        return maybeFn;
    };
};

function twilio() {
    var accessTokenOrFun = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    return function (WrappedComponent) {
        var TwilioConversation = (function (_React$Component) {
            _inherits(TwilioConversation, _React$Component);

            _createClass(TwilioConversation, null, [{
                key: 'childContextTypes',
                value: {
                    conversation: _react.PropTypes.object,
                    client: _react.PropTypes.object,
                    participants: _react.PropTypes.array
                },
                enumerable: true
            }]);

            function TwilioConversation(props, context) {
                var _this = this;

                _classCallCheck(this, TwilioConversation);

                _get(Object.getPrototypeOf(TwilioConversation.prototype), 'constructor', this).call(this, props, context);

                // check for WebRTC

                this.startTwilio = function (props) {
                    var linkFun = ensureCallable(accessTokenOrFun);
                    var accessToken = linkFun(props);
                    var client = null;

                    if (_this.state && _this.state.client) {
                        if (!accessToken) {
                            return client;
                        }
                        return _this.state.client;
                    }

                    if (accessToken) {
                        // use our AccessToken to generate an AccessManager object
                        var accessManager = new Twilio.AccessManager(accessToken);

                        // create a Conversations Client and connect to Twilio
                        client = new Twilio.Conversations.Client(accessManager);

                        client.listen().then(_this.clientConnected, function (error) {
                            this.setState({
                                error: 'Could not connect to Twilio: ' + error.message
                            });
                            console.log('Could not connect to Twilio: ' + error.message);
                        });
                    }

                    return client;
                };

                this.clientConnected = function () {
                    console.log("Connected to Twilio. Listening for incoming Invites as '" + _this.state.client.identity + "'");

                    _this.setState({
                        listening: true
                    });
                    _this.state.client.on('invite', function (invite) {
                        console.log('Incoming invite from', invite);

                        _this.setState({
                            invite: invite
                        });
                    });
                };

                this.acceptInvite = function (options) {
                    if (_this.state.invite && !_this.state.conversation) {
                        _this.state.invite.accept(options).then(_this.conversationStarted);
                        _this.setState({
                            invite: null
                        });
                    }
                };

                this.rejectInvite = function () {
                    if (_this.state.invite) {
                        _this.state.invite.reject();
                        _this.setState({
                            invite: null
                        });
                    }
                };

                this.disconnect = function () {
                    _this.state.conversation.disconnect();

                    _this.setState({
                        conversation: null
                    });
                };

                this.conversationStarted = function (conversation) {
                    console.log('Conversation started', conversation);

                    _this.setState({
                        conversation: conversation
                    });

                    conversation.on('participantConnected', function (participant) {
                        var array = [];
                        array.concat(_this.state.participants);
                        array.push(participant);

                        _this.setState({
                            participants: array,
                            connected: participant
                        });
                    });

                    // when a participant disconnects, note in log
                    conversation.on('participantDisconnected', function (participant) {
                        var index = _this.state.participants.indexOf(participant.identity);
                        var participants = _this.state.participants.splice(index, 1);
                        var updatedState = {
                            participants: participants,
                            disconnected: participant
                        };

                        if (participants.length === 0) {
                            updatedState.conversation = null;
                        }

                        _this.setState(updatedState);
                    });
                };

                var hasVideo = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

                this.state = {
                    client: this.startTwilio(props),
                    participants: [],
                    listening: false,
                    error: !hasVideo ? 'Video is not available in your browser.' : null
                };
            }

            _createClass(TwilioConversation, [{
                key: 'componentWillReceiveProps',
                value: function componentWillReceiveProps(nextProps) {
                    this.setState({
                        client: this.startTwilio(nextProps)
                    });
                }
            }, {
                key: 'getChildContext',
                value: function getChildContext() {
                    return {
                        client: this.state.client,
                        conversation: this.state.conversation,
                        participants: this.state.participants
                    };
                }
            }, {
                key: 'invite',
                value: function invite(userOrUsers) {
                    var _this2 = this;

                    if (!this.state.client) {
                        return console.error('Unable to create conversation, no active client');
                    }

                    if (this.state.conversation && this.state.conversation._dialogs.size > 0) {
                        this.state.conversation.invite(userOrUsers);
                    } else {

                        if (typeof userOrUsers === 'string') {
                            userOrUsers = [userOrUsers];
                        }

                        this.state.client.inviteToConversation(userOrUsers[0]).then(function (conversation) {
                            if (userOrUsers.length > 1) {
                                userOrUsers.shift();
                                conversation.invite(userOrUsers);
                            }
                            _this2.conversationStarted(conversation);
                        }, function (error) {

                            console.error('Unable to create conversation', error);
                        });
                    }
                }
            }, {
                key: 'render',
                value: function render() {
                    return _react2['default'].createElement(WrappedComponent, _extends({}, this.props, {
                        disconnect: this.disconnect.bind(this),
                        error: this.state.error,
                        listening: this.state.listening,
                        conversation: this.state.conversation,
                        client: this.state.client,
                        participants: this.state.participants,
                        connected: this.state.connected,
                        disconnected: this.state.disconnected,
                        incomingInvite: this.state.invite ? {
                            accept: this.acceptInvite.bind(this),
                            reject: this.rejectInvite.bind(this),
                            from: this.state.invite.from
                        } : null,
                        invite: this.invite.bind(this)
                    }));
                }
            }]);

            return TwilioConversation;
        })(_react2['default'].Component);

        return TwilioConversation;
    };
}
exports['default'] = twilio;
module.exports = exports['default'];